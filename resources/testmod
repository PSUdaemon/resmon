#!/usr/bin/env perl
# testmod - A simple script to test a resmon module
# Usage:
#
# testmod Module::Name check_name key val key val
#
# module_name and check_name are required, the key val pairs are passed to the
# module as its configuration.
#
# This script should be run from the module dir. For example, if you wanted to
# run Core::Sample, then cd to resmon/lib (i.e. just outside the Core
# directory), and run:
#
#   ../resources/testmod Core::Sample some_check_name arg1 foo arg2 bar

use strict;
use warnings;

use lib '.';

# Hack to mark modules we provide here as already loaded
$INC{"Resmon/Module.pm"} = $0;
$INC{"Resmon/ExtComm.pm"} = $0;

package Resmon::Module;
use strict;
use warnings;

sub new {
    my ($class, $check_name, $config) = @_;
    my $self = {};
    $self->{config} = $config;
    $self->{check_name} = $check_name;
    bless ($self, $class);
    return $self;
}

1;

package Resmon::ExtComm;
use strict;
use warnings;

use base "Exporter";
our @EXPORT_OK = qw/cache_command run_command/;

sub cache_command($$) {
    my $command = shift;
    run_command($command);
}

sub run_command {
    my @cmd = @_;
    pipe(my ($r, $w));
    my $pid = fork();
    if($pid) {
        close($w);
        my @lines = <$r>;
        waitpid($pid, 0);
        return join("", @lines);
    } else {
        eval {
            open(STDOUT, ">&", $w);
            close($r);
            exec(@cmd);
        };
        exit();
    }
}

1;

package main;

my $module = shift;        # Module to test
my $check_name = shift;
my $kvs = {@ARGV};

if (!$module || !$check_name) {
    print "Usage: $0 module_name check_name [[key] [val]] [[key] [val]]\n";
    exit 1;
}

eval "use $module;";
if ($@) {
    print "$@\n";
    exit 1;
}
my $obj = $module->new($check_name, $kvs);
my $metrics;
eval { $metrics = $obj->handler(); };
if ($@) {
    chomp $@;
    $metrics = { "error" => ["$@", "s"] };
}

print "$module $check_name\n\n";
for my $k (sort keys %$metrics) {
    my $v = $metrics->{$k};
    # Default type is auto
    if (ref($v) ne "ARRAY") {
        $v = [$v, "0"];
    }
    printf "%15s = %s (%s)\n", $k , $v->[0], $v->[1];
}
